/**
 * model Submission {
 * id          String            @id @default(uuid())
 * submittedAt DateTime?
 * updatedAt   DateTime          @updatedAt
 * fileUrl     String? // e.g. file path
 * status      SubmissionStatus? // e.g. "submitted", "graded", "late"
 * grade       Float? // optional grading
 * feedback    String? // optional teacher feedback
 * maxAttempts    Int @default(3)
 * projectId String
 * project Project          @relation("ProjectSubmissions", fields: [projectId], references: [id], onDelete: Cascade)
 * @@index([status])
 * @@index([submittedAt])
 * }
 */

model LabSubmission {
  id          String            @id @default(uuid())
  labId       String
  studentId   String
  projectId   String
  submittedAt DateTime?         @default(now())
  updatedAt   DateTime          @updatedAt
  status      SubmissionStatus? // submitted, graded, late, etc.
  grade       Float?
  feedback    String?
  attempt     Int               @default(autoincrement())

  student Student @relation("StudentLabSubmissions", fields: [studentId], references: [userId], onDelete: Cascade)
  project Project @relation("ProjectLabSubmissions", fields: [projectId], references: [id], onDelete: Cascade)
  lab     Lab     @relation(fields: [labId], references: [id], onDelete: Cascade)

  files LabSubmissionFile[]

  @@unique([labId, studentId, projectId], name: "uniqueLabSubmissionPerStudentAndPerProject")
  @@index([status])
  @@index([submittedAt])
}

model LabSubmissionFile {
  id              String   @id @default(uuid())
  labSubmissionId String
  url             String
  name            String?
  uploadedAt      DateTime @default(now())

  labSubmission LabSubmission @relation(fields: [labSubmissionId], references: [id], onDelete: Cascade)
}
