name: Gns3LabLauncher
services:
  postgres:
    image: postgres:17
    container_name: postgres
    restart: unless-stopped
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - "${ROOT_DATA_DIR}/db/postgres:/var/lib/postgresql/data"
    networks:
      - gns3netlab-network
    healthcheck:
      test:
        ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 10

  redis:
    image: redis:8.0-rc1
    container_name: redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - gns3netlab-network
    command: redis-server --save 60 1 --loglevel warning --requirepass ${REDIS_PASSWORD}
    volumes:
      - "${ROOT_DATA_DIR}/db/redis:/data"
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "${REDIS_PASSWORD}", "ping"]
      interval: 5s
      timeout: 5s
      retries: 10

  openvpn:
    image: rimorgin/openvpn
    container_name: openvpn
    restart: unless-stopped
    ports:
      - "${OPENVPN_PORT}:${OPENVPN_PORT}/udp"
    cap_add:
      - NET_ADMIN
      - MKNOD
    environment:
      - OPENVPN_SERVER_IP=${OPENVPN_SERVER_IP}
      - ENABLE_DNS=${OPENVPN_ENABLE_DNS}
      - STATIC_HOST_MAPPINGS=${OPENVPN_STATIC_HOST_MAPPINGS}
      - DOMAIN=${OPENVPN_DOMAIN}
    volumes:
      - ./src/server/var/openvpn:/data
    networks:
      - gns3netlab-network
    privileged: true
    healthcheck:
      test: ["CMD", "pgrep", "openvpn"]
      interval: 5s
      timeout: 5s
      retries: 10

networks:
  gns3netlab-network:
    driver: bridge
